L1
L2= L1 + A
L3=L2+ A
L4=L3+ A
L5=L4+ A
L6=L5+ A
L7=L6+ A
L8=L7+ A
L9=L8+ A
L10=L9+ A
L11=L10+ A
L = L1 + A *(0:10)
L
L2=c(L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11)
L2
L = cw1
A = diff(range(cw))/10
A #redondearlo a la amplitud que sea mejor por ejemplo 1.3
A=1.3
A
#Elegir los extremos
L1=min(cw)-1/2*0.1
L1
L2= L1 + A
L3=L2+ A
L4=L3+ A
L5=L4+ A
L6=L5+ A
L7=L6+ A
L8=L7+ A
L9=L8+ A
L10=L9+ A
L11=L10+ A
L = L1 + A *(0:10)
L
L2=c(L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11)
L2
cw1 = L
A = diff(range(cw))/10
A #redondearlo a la amplitud que sea mejor por ejemplo 1.3
A=1.3
A
#Elegir los extremos
L1=min(cw)-1/2*0.1
L1
L2= L1 + A
L3=L2+ A
L4=L3+ A
L5=L4+ A
L6=L5+ A
L7=L6+ A
L8=L7+ A
L9=L8+ A
L10=L9+ A
L11=L10+ A
L = L1 + A *(0:10)
L
L2=c(L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11)
L2
cw1 = L2
A = diff(range(cw))/10
A #redondearlo a la amplitud que sea mejor por ejemplo 1.3
A=1.3
A
#Elegir los extremos
L1=min(cw)-1/2*0.1
L1
L2= L1 + A
L3=L2+ A
L4=L3+ A
L5=L4+ A
L6=L5+ A
L7=L6+ A
L8=L7+ A
L9=L8+ A
L10=L9+ A
L11=L10+ A
L = L1 + A *(0:10)
L
L2=c(L1,L2,L3,L4,L5,L6,L7,L8,L9,L10,L11)
L2
cw1 = L2
cw1
cw1
Afd= 2*(quantile(cw,0.75,names = FALSE)-quantile(cw,0.25,names = FALSE))*n^(-1/3) #names=False es para que solo devuelva los numeros
k4 = ceiling(diff(range(cw))/Afd)
k4
n = length(cw)
k1= ceiling(sqrt(n)) #ceiling PARTE ENTERA SUPERIOS, Redondeo hacia arriba
k1
remove.packages("base64enc", lib="~/R/win-library/4.0")
hist(cw1,breaks = L,right = FALSE, main = "Histograma de las anchuras de los cangrejos")
hist(cw1,breaks = L,right = FALSE,plot=FALSE)
histAbs(cw,L)
histAbs(cw1,L)
## Regresion lineal
## Regresion lineal
body = read.table("Curso/Data Science/Markdown/data/bodyfat.txt", header = TRUE)
head(body,3)
bosy2 = [,c(2,4)] # tomamos todas las filas pero solo las columnas 2 y 4
body2 = [,c(2,4)] # tomamos todas las filas pero solo las columnas 2 y 4
body2 = body[,c(2,4)] # tomamos todas las filas pero solo las columnas 2 y 4
names(bosy2)=c("Grasa","Peso") #Cambiamos los nombres de las columnas
body2 = body[,c(2,4)] # tomamos todas las filas pero solo las columnas 2 y 4
names(body2)=c("Grasa","Peso") #Cambiamos los nombres de las columnas
str(body2)
View(body2)
plot(body2)
lm(body2$Peso~body2$Grasa) # Opcion uno
lm(Peso~Grasa, data = body2)# Opcion dos
plot(body2)
abline(lm(Peso~Grasa, data = body2),col="purple")
summary(lm(Peso~Grasa, data = bosdy2))
summary(lm(Peso~Grasa, data = body2))
summary(lm(Peso~Grasa, data = body2))$r.squared
dep = c(1.2,3.6,12,36)
ind = c(20,35,61,82)
plot(ind,dep, main="Escala lineal")
plot(ind,dep, log="y", main = "Escala semilogaritmica")
lm(log10(dep~ind))
lm(log10(dep)~ind)
summary(lm(log10(dep)~ind))$r.squared
plot(ind,dep, main="Curva de Regresion Lineal")
curve(1.054^x*0.468,add = TRUE, col="purple")
tiempo = 1:10
gramos = c(0.097,0.709,2.698,6.928,15.242,29.944,52.902,83.903,120.612,161.711)
d.f= data.frame(tiempo,gramos)
plot(d.f)
plot(d.f,log="y")
plot(d.f, log="xy")
lm(log10(gramos)~log10(tiempo),data=d.f)
summary(lm(log10(gramos)~log10(tiempo),data=d.f))$r.squared
plot(d.f)
curve(x^(3.298)*0.081,add = TRUE, col="purple")
install.packages("Rlab")
#instalar Rlab
library(Rlab)
dbenr(0, prob=0.7)
#instalar Rlab
library(Rlab)
dbern(0, prob=0.7)
dbern(1, prob=0.7)
#instalar Rlab
library(Rlab)
dbern(0, prob=0.7)
dbern(1, prob=0.7)
pbern(0, prob=0.7)
pbern(1, prob=0.7)
#instalar Rlab
library(Rlab)
dbern(0, prob=0.7)
dbern(1, prob=0.7)
pbern(0, prob=0.7)
pbern(1, prob=0.7)
qbern(0.5,0.7)
qbern(0.25,0.7)
rbern(100, prob=0.7)
rbern(100, prob=0.7) -> data
hist(data)
library(Rlab)
p=0.6
n=30
n=30
p=0.6
library(Rlab)
dbinom(0:30,size = n,prob=p)
n=30
p=0.6
library(Rlab)
plot(=:30,dbinom(0:30,size = n,prob=p))
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
plot(0:n, pbinom(0:n, size=n,prob = p))
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
plot(0:n, pbinom(0:n, size=n,prob = p))#funcion de probabilidad acumulada
qbinom(0.5,size = n,prob = p)
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
plot(0:n, pbinom(0:n, size=n,prob = p))#funcion de probabilidad acumulada
qbinom(0.5,size = n,prob = p)
qbinom(0.25,size = n,prob = p)
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
plot(0:n, pbinom(0:n, size=n,prob = p))#funcion de probabilidad acumulada
qbinom(0.5,size = n,prob = p)
qbinom(0.25,size = n,prob = p)
qbinom(0.75,size = n,prob = p)
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
plot(0:n, pbinom(0:n, size=n,prob = p))#funcion de probabilidad acumulada
qbinom(0.5,size = n,prob = p)
qbinom(0.25,size = n,prob = p)
qbinom(0.75,size = n,prob = p)
rbinom(1000, n,p)
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))
plot(0:n, pbinom(0:n, size=n,prob = p))#funcion de probabilidad acumulada
qbinom(0.5,size = n,prob = p)
qbinom(0.25,size = n,prob = p)
qbinom(0.75,size = n,prob = p)
hist(rbinom(1000, n,p))
n=30
p=0.6
library(Rlab)
plot(0:30,dbinom(0:30,size = n,prob=p))#funcion de densidad
plot(0:n, pbinom(0:n, size=n,prob = p))#funcion de probabilidad acumulada
qbinom(0.5,size = n,prob = p)
qbinom(0.25,size = n,prob = p)
qbinom(0.75,size = n,prob = p)
hist(rbinom(100000, n,p), breaks = 0:30)
library(Rlab)
p=0.1
dgeom(0:10,p)
library(Rlab)
p=0.1
plot(0:10,dgeom(0:10,p))
library(Rlab)
p = 0.1
plot(0:10,dgeom(0:10,p))
library(Rlab)
p = 0.1
plot(0:10,dgeom(0:10,p))
library(Rlab)
p = 0.1
plot(0:10,dgeom(0:10,p))
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:10,p))
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:10,p))
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:20,p))
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:20,p))
plot(0:20,pgeom(0:20,p))
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:20,p))
plot(0:20,pgeom(0:20,p),ylim = c(0,1))
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:20,p))
plot(0:20,pgeom(0:20,p),ylim = c(0,1))
qgeom(0.5,p)
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:20,p))
plot(0:20,pgeom(0:20,p),ylim = c(0,1))
qgeom(0.5,p) # En 6 intentos deberia abrir
qgeom(0.75,p) # En 13 intentos deberia abrir
rgeom(10,p)
library(Rlab)
p = 0.1
plot(0:20,dgeom(0:20,p))
plot(0:20,pgeom(0:20,p),ylim = c(0,1))
qgeom(0.5,p) # En 6 intentos deberia abrir
qgeom(0.75,p) # En 13 intentos deberia abrir
rgeom(10,p) # probabilidad de las veces que fue y probo cantidad de llaves hasta que abrio
hist(rgeom(1000,p))
library(Rlab)
M=7
N=13
x=12
dhyper(x=0:12, m=M,n=N,k=x)
library(Rlab)
M=7
N=13
k=12
dhyper(x=0:12, m=M,n=N,k=k)
phyper(q=0:12, m=M,n=N,k=k)
library(Rlab)
M=7
N=13
k=12
dhyper(x=0:12, m=M,n=N,k=k)
phyper(q=0:12, m=M,n=N,k=k)
qhyper((p=0.5, m=M,n=N,k=k))
library(Rlab)
M=7
N=13
k=12
dhyper(x=0:12, m=M,n=N,k=k)
phyper(q=0:12, m=M,n=N,k=k)
qhyper(p=0.5, m=M,n=N,k=k)
library(Rlab)
M=7
N=13
k=12
dhyper(x=0:12, m=M,n=N,k=k)
phyper(q=0:12, m=M,n=N,k=k)
qhyper(p=0.5, m=M,n=N,k=k)
rhyper(nn=1000,m=M,n=N,k=k)->data
hist(data)
library(Rlab)
M=7
N=13
k=12
dhyper(x=0:12, m=M,n=N,k=k)
phyper(q=0:12, m=M,n=N,k=k)
qhyper(p=0.5, m=M,n=N,k=k)
rhyper(nn=1000,m=M,n=N,k=k)->data
hist(data,breaks = 9)
library(Rlab)
M=7
N=13
k=12
dhyper(x=0:12, m=M,n=N,k=k)
phyper(q=0:12, m=M,n=N,k=k)
qhyper(p=0.5, m=M,n=N,k=k)
rhyper(nn=1000,m=M,n=N,k=k)->data
hist(data,breaks = 8)
a = 0
b = 1
dunif(0.5,min = a,max = b)
a = 0
b = 1
dunif(0.5,min = a,max = b)
punif(x,a,b)
a = 0
b = 1
plt(dunif(0.5,min = a,max = b))
a = 0
b = 1
plot(dunif(0.5,min = a,max = b))
punif(x,a,b)
a = 0
b = 1
x = seq(-0.1,1.1,0.1)
plot(dunif(x,min = a,max = b))
punif(x,a,b)
a = 0
b = 1
x = seq(-0.1,1.1,0.1)
plot(dunif(x,min = a,max = b))
plot(punif(x,a,b), type = "l")
a = 0
b = 1
x = seq(-0.1,1.1,0.1)
plot(dunif(x,min = a,max = b))
plot(punif(x,a,b), type = "l")
qunif(0.5,a,b)
qunif(0.25,a,b)
a = 0
b = 1
x = seq(-0.1,1.1,0.1)
plot(dunif(x,min = a,max = b))
plot(punif(x,a,b), type = "l")
qunif(0.5,a,b)
qunif(0.25,a,b)
runif(10000,a,b)->data
hist(data)
a = 0
b = 1
x = seq(-0.1,1.1,0.1)
plot(dunif(x,min = a,max = b))
plot(punif(x,a,b), type = "l")
qunif(0.5,a,b)
qunif(0.25,a,b)
runif(100000,a,b)->data
hist(data)
a = 0
b = 1
x = seq(-0.1,1.1,0.1)
plot(dunif(x,min = a,max = b))
plot(punif(x,a,b), type = "l")
qunif(0.5,a,b)
qunif(0.25,a,b)
runif(10000000,a,b)->data
hist(data)
?use_python
Sys.which()
Sys.which("python")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_pytohn("C:\Python\ppython.exe")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_pytohn("C:/Python/python.exe")
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
use_python("C:/Python/python.exe")
hist(py$pokemon)
hist(py$pokemon[,"Speed"])
hist(py$pokemon[,"Speed"],breaks = 10, mean="Velocidad de los pokemon")
hist(py$pokemon[,"Speed"],breaks = 10, main="Velocidad de los pokemon")
pokemon2<- read.csv("data/Pokemon.csv", header = TRUE)
library(tidyverse)
pokemon2=pokemon2 %>%
filter(Generation==1) %>%
select(Type.1,Type.2,Speed) %>%
na.omit()
summary(pokemon2)
pokemon2<- read.csv("data/Pokemon.csv", header = TRUE)
head(pokemon2)
library(tidyverse)
pokemon2 <- pokemon2 %>%
filter(Generation==1) %>%
select(Type.1,Type.2,Speed) %>%
na.omit()
summary(pokemon2)
pokemon2<- read.csv("data/Pokemon.csv", header = TRUE)
head(pokemon2)
library(tidyverse)
pokemon2 <- pokemon2 %>%
filter(Generation==1) %>%
select("Type.1","Type.2",Speed) %>%
na.omit()
summary(pokemon2)
pokemon2<- read.csv("data/Pokemon.csv", header = TRUE)
head(pokemon2)
library(tidyverse)
pokemon2 <- pokemon2 %>%
filter(Generation == 1) %>%
select("Type.1","Type.2",Speed) %>%
na.omit()
summary(pokemon2)
pokemon2<- read.csv("data/Pokemon.csv", header = TRUE)
head(pokemon2)
library(tidyverse)
pokemon2 <- pokemon2 %>%
filter(Generation == 1) %>%
select("Type.1","Type.2","Speed") %>%
na.omit()
summary(pokemon2)
pokemon2<- read.csv("data/Pokemon.csv", header = TRUE)
head(pokemon2)
library(tidyverse)
pokemon2 <- pokemon2 %>%
filter(Generation == 1) %>%
select(Type.1,Type.2,Speed) %>%
na.omit()
summary(pokemon2)
install.packages("nycflights13")
data <- nycflights13::flights
data <- nycflights13::flights
head(data)
summary(data)
data <- nycflights13::flights
head(data)
summary(data)
data <- nycflights13::flights
head(data)
nrow(data)
summary(data)
summary(py$pydata)
summary(py$pydata)
boxplot(arr_delay~origin,data = py$pydata,main="Retraso de los vuelos hacia Orlando desde NYC")
summary(py$pydata)
boxplot(arr_delay~origin,data = py$pydata,main="Retraso de los vuelos hacia Orlando desde NYC")
library(magic)
setwd("~/Curso/Machine Learning/1-Plantilla-procesamiento-de-datos")
dataset = read.csv('Data.csv')
dataset = read.csv('Data.csv')
View(dataset)
dataset$Age
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age,FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Age)
View(dataset)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary,FUN = function(x)mean(x,na.rm = TRUE)),
dataset$Salary)
View(dataset)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c("France","Spain","Germany"),
labels = c(1,2,3))
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c("No","Yes"),
labels = c(0,1))
View(dataset)
install.packages("caTools")
library(caTools)
#Dividir los datos en conjunto de entrenamiento y conjunto de test
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set= subset(dataset, split==TRUE)
testing_set= subset(dataset, split==FALSE)
View(testing_set)
View(training_set)
#Escalado de Valores
training_set = scale(training_set)
#Escalado de Valores
training_set[,2:3] = scale(training_set[,2:3])
testing_set[,2:3] = scale(testing_set[,2:3])
View(testing_set)
View(training_set)
View(training_set)
View(testing_set)
